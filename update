Modified the entire front end to accomodate a new styling method using "styled components" package. This will make the code much more organized and modular. The styling of the app is now structured with sass (a modified css syntax) and styled-components (component based styling rather than using css stylesheets)

Began building the back-end architecture. This includes: the "createUser" module and the "updateUser" module. Modules consist of schemas, resolvers, queries/mutations, and collections. 

Schemas are documents containing all properties of data. They're the source of truth for all data in the app. Anytime anyone tries to send data to the server from the site it will pass through this schema. If the data does not conform with the schema the data cannot get into the server. This is necessary for security and to ensure the data is always consistent.

Queries and mutations are the requests made to the server. This is what the client uses to speak to the server. If it's a query it will be requesting data. If it's a mutation it will be changing data.

Resolvers are chunks of server code that actually perform the action triggered by the queries and mutations.

Collections are just collections of data in the database. There is a "User" collection containing all the users or a "Inventory" collection containing the inventory data. 

This pattern using modules like this will be repeated throughout the app. All modules are in the "modules" folder.

The back-end will be built with Meteor (which is Node based). And the querying language will be Graphql. The Graphql framework used is Apollo. All of this is packaged up into a framework called "Vulcan". The reason I went with using Apollo (Graphql) is because this is a universal querying language. Querying is nothing more than sending a request from client to server, or a way of communication. So, because we're using this, in the future we can adapt any microservice in any language on any server. Say you want to integrate a program written in Java or C++ or Python or whatever, everything will be able to communicate with our app. It's like if different countries using English to communicate to one another.

Lastly, I began to build out the email services which are able to utilize nicely styled email templates. Email services will include things such as mailing lists, forgot password emails, registration confirmation emails, etc.

When visiting the account page for the first time a pop-up window will appear asking for the rest of the user information. This will be required before doing anything else.
